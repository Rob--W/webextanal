#!/usr/bin/env node
"use strict";

const path = require('path');
const util = require('util');

const fs = require('graceful-fs');
const fsReadFile = util.promisify(fs.readFile);

const stripJsonComments = require('strip-json-comments');

// Source: https://searchfox.org/mozilla-central/rev/5c922d8b93b43c18bf65539bfc72a30f84989003/toolkit/mozapps/extensions/internal/XPIProvider.jsm#188-191
const R_EXTENSION_ID =
    /^(\{[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\}|[a-z0-9-._]*@[a-z0-9-._]+)$/i;

const FILTERS = Object.create(null);

FILTERS.permissions = class {
    static get USAGE() {
        return `
Matches if any of the arguments is found in the permissions or
optional_permissions array in manifest.json. To require multiple
permissions at the same time, separate by commas.

Example:
filter-permissions webRequest,webRequestBlocking tabs
matches if either webRequest and webRequestBlocking are present,
or if tabs is present.
`;
    }
    constructor(args) {
        this.anyOfPermissionsLists = args.map(perms => perms.split(','));
    }

    _matchesArgs(permissions) {
        return this.anyOfPermissionsLists.some(allOfPermissions => {
            return allOfPermissions.every(p => permissions.includes(p));
        });
    }

    async filter(logger, line) {
        let extdir = getExtensionDirectory(line);
        if (!extdir) {
            logger.warn(`Not an extension directory: "${line}"`);
            return false;
        }
        // TODO: Consider caching the result of directories that have alrea
        let manifest;
        try {
            manifest = await getManifest(extdir);
        } catch (e) {
            logger.warn(`Invalid manifest: ${e}`);
            return false;
        }
        let {permissions, optional_permissions} = manifest;
        if (Array.isArray(permissions) || Array.isArray(optional_permissions)) {
            if (!Array.isArray(permissions)) {
                return this._matchesArgs(optional_permissions);
            }
            if (!Array.isArray(optional_permissions)) {
                return this._matchesArgs(permissions);
            }
            return this._matchesArgs(permissions.concat(optional_permissions));
        }
        return false; // = this._matchesArgs([]);
    }
};

FILTERS.manifest = class {
    static get USAGE() {
        return String.raw`
Filter manifests whose key match one of the given patterns.
Nested keys are supported via "."

Example:
filter-manifest version '^1$' '^1\.' '2'
matches if the version is "1", starts with "1." or contains "2".

`;
    }

    constructor(args) {
        this.keys = args[0].split(".");
        this.anyOfPatterns = args.slice(1).map(pattern => new RegExp(pattern));
        if (!this.keys.length) {
            throw new Error();
        }
    }

    async filter(logger, line) {
        let extdir = getExtensionDirectory(line);
        if (!extdir) {
            logger.warn(`Not an extension directory: "${line}"`);
            return false;
        }
        let manifest;
        try {
            manifest = await getManifest(extdir);
        } catch (e) {
            logger.warn(`Invalid manifest: ${e}`);
            return false;
        }
        let value = manifest;
        for (let i = 0; i < this.keys.length && value != null; ++i) {
            value = value[this.keys[i]];
        }
        if (value != null) {
            return this.anyOfPatterns.some(pattern => pattern.test(value));
        }
        return false;
    }
}

FILTERS["user-count"] = class {
    static get USAGE() {
        return String.raw`
Filters extensions whose usage (user counts) match the given parameters:
Supported parameters:
 N       Exactly N users
 N+      N or more users
 N-      N or less users
 -1      Unknown number of users
 prepend Prepend the user count before the output line.

User counts are read from /tmp/amo_metadata.json (which is an
array of objects with the keys id, guid, average_daily_users)
and can be created from the webextaware cache file by:
 ${this.COMMAND_SETUP_METADATA}

Each line of input can be any of the following:
- Directories created by webextaware.
- AMO IDs (integers) ("id")
- Extension IDs ("guid")

Example:
filter-user-count 10+ 100- prepend
matches only lines with extensions  with at least 10 and at most 100 users,
and prepend the user count before the line.

`;
    }

    static get AMO_METADATA_JSON() {
        return process.env.AMO_METADATA_JSON || "/tmp/amo_metadata.json";
    }
    static get COMMAND_SETUP_METADATA() {
        // "webextaware sync" creates "~/.webextaware/amo_metadata.json.bz2",
        // whose format is documented at:
        // https://addons-server.readthedocs.io/en/latest/topics/api/addons.html#search
        //
        // The metadata file can contain 30k+ entries and is rather large.
        // To avoid the overhead of decompression and deserializing the whole
        // JSON, prepare the data upfront with the minimal keys, once.
        const jq = `| jq 'map({"id","guid","average_daily_users"})' -c`;
        return `bzip2 -kcd ~/.webextaware/amo_metadata.json.bz2 ${jq} > /tmp/amo_metadata.json`
            .replace("/tmp/amo_metadata.json", this.AMO_METADATA_JSON);
    }

    constructor(args) {
        this.conditions = [];
        this.prepend = false;

        let rArgPattern = /^(-?\d+)([+-]?)$/;
        for (let arg of args) {
            let parsed = rArgPattern.exec(arg);
            if (parsed) {
                this._addCondition(+parsed[1], parsed[2]);
            } else if (arg === "prepend") {
                this.prepend = true;
            } else {
                throw new Error(`Unsupported argument: ${arg}`);
            }
        }

        this._metadataReadyPromise = this._initializeMetadata();
        this.userCountByAMOId = new Map();
        this.userCountByExtId = new Map();
    }

    _addCondition(num, op) {
        let func;
        if (op === "") {
            func = n => n === num;
        } else if (op === "+") {
            func = n => n >= num;
        } else if (op === "-") {
            func = n => n <= num;
        } else {
            throw new Error(`Unsupported operator: "${op}"`);
        }
        this.conditions.push(func);
    }

    _matchesCondition(n) {
        return this.conditions.every(func => func(n));
    }

    async _initializeMetadata() {
        const AMO_METADATA_JSON = this.constructor.AMO_METADATA_JSON;

        let metadata;
        try {
            metadata = JSON.parse(
                await fsReadFile(AMO_METADATA_JSON, { encoding: "utf-8" })
            );
            if (!Array.isArray(metadata)) {
                throw new Error("The data is not an array");
            }
        } catch (e) {
            throw new Error(
                `Unable to load AMO metadata from ${AMO_METADATA_JSON}: ${e}
To create the file, run:
${this.constructor.COMMAND_SETUP_METADATA}`
            );
        }

        for (let amoAddon of metadata) {
            let userCount = amoAddon.average_daily_users;
            this.userCountByAMOId.set(amoAddon.id, userCount);
            this.userCountByExtId.set(amoAddon.guid, userCount);
        }
    }

    async filter(logger, line) {
        // webextaware creates the following directory structure:
        // . / <amo id> / <64 chars of hex hash> /
        let match =
            /^(?:.*\/)?(\d+)\/[a-f0-9]{64}(?=\/|$)/.exec(line) ||
            // AMO ID
            /^(\d+)$/.exec(line);
        let amoId, extId;
        if (match) {
            amoId = parseInt(match[1]);
        } else if (R_EXTENSION_ID.test(line)) {
            extId = line;
        } else {
            logger.warn(`Not a path from webextaware, AMO ID or addon ID: "${line}"`);
            return false;
        }
        await this._metadataReadyPromise;
        let userCount;
        if (amoId) {
            userCount = this.userCountByAMOId.get(amoId);
        } else if (extId) {
            userCount = this.userCountByExtId.get(extId);
        }
        if (userCount == null) {
            userCount = -1;
        }

        if (!this._matchesCondition(userCount)) {
            return false;
        }
        if (this.prepend) {
            logger.replaceOutputLine(`${userCount}\t${line}`);
            return true;
        }
        return true;
    }
}

async function getManifest(extdir) {
    let manifestLocation = path.join(extdir, 'manifest.json');
    let manifestJsonData = await fsReadFile(manifestLocation, {encoding: 'utf-8'});
    if (manifestJsonData.startsWith('\uFEFF')) {
        manifestJsonData = manifestJsonData.slice(1);
    }
    let manifest;
    try {
        manifest = JSON.parse(manifestJsonData);
    } catch (e) {
        manifest = JSON.parse(stripJsonComments(manifestJsonData));
    }
    if (typeof manifest !== 'object' || manifest === null) {
        throw new Error(`manifest.json does not contain an object`);
    }
    return manifest;
}

var cwdDir;
var regexUnzipped;

// Returns the part of filepath that is an extension directory.
function getExtensionDirectory(filepath) {
    // For now, let's be strict and only return directoryies matching the pattern.

    // webextaware creates the following directory structure:
    // . / <numeric id> / <64 chars of hex hash> /
    let match = /^(?:.*\/)?\d+\/[a-f0-9]{64}(?=\/|$)/.exec(filepath);
    if (match) {
        return match[0];
    }

    // Extracted files from the network share have the following format:
    // mnt/ebs/ unzipped/ 1 / <digits> / <single digit> / <digits> / <digits> /
    // May also be unzipped_banned.
    // Digits: / addontype-id / addon-id / channel-id / version-id / file-id /
    match = /^(?:.*\/)?unzipped\/1\/\d+\/\d\/\d+\/\d+(?=\/|$)/.exec(filepath);
    if (match) {
        return match[0];
    }

    if (!cwdDir) {
        cwdDir = process.cwd() + "/";
    }
    if (!regexUnzipped) {
        // Pattern to match the directory based on the full path. It accepts
        // "/" and "/./" as path separator, to support the case when "filepath"
        // starts with "./", searching from a subdirectory of "zipped" (but not
        // yet an extension directory), e.g. cwdDir = "unzipped/1/".
        regexUnzipped = new RegExp([
            // Prefix:
            '^(?:.*/)?unzipped[^/]*',
            // addontype-id:
            '1',
            // addon-id:
            '\\d+',
            // channel-id:
            '\\d+',
            // version-id:
            '\\d+',
            // file-id, followed by components inside extension directory:
            // Match "/." if needed, in case the input starts with "."
            '\\d+(/\\.|(?=/|$))',
        ].join('/(?:\\./)?'));
    }

    var abspath = cwdDir + filepath;
    match = regexUnzipped.exec(abspath);
    if (match && cwdDir.length < match[0].length) {
        // Strip cwdDir (since it is not part of the input), and strip the file
        // components at the end (since we want to match the extension rootdir).
        return abspath.slice(cwdDir.length, match[0].length);
    }
}

async function readLines(onLine) {
    const readline = require('readline');
    let rl = readline.createInterface({
        input: process.stdin,
    });
    await new Promise((resolve, reject) => {
        rl.on('line', async (line) => {
            try {
                await onLine(line);
            } catch (e) {
                reject(e);
                if (rl) {
                    rl.close();
                    rl = null;
                }
            }
        });
        rl.once('close', resolve);
    });
}

async function main() {
    let args = process.argv.slice(1);
    var cmd = path.basename(args.shift());
    if (cmd === 'filter') {
        // Run as "node filter [cmd] [...args]"
        cmd = args.shift();
    } else if (cmd) {
        // Run as "node filter-[cmd] [...args]"
        cmd = cmd.replace(/^filter-/, '');
    }

    let FilterClass = FILTERS[cmd];
    if (!FilterClass) {
        console.error(`Unknown filter command: ${cmd}`);
        console.error(`Choose one of: ${Object.keys(FILTERS).join(' ')}`);
        return 1;
    }
    if (args.length === 0 ||
        args.length === 1 && ['--help', '-h'].includes(args[0])) {
        console.error(`filter-${cmd} --help  (see README.md for more info)`);
        console.error(FilterClass.USAGE);
        return 1;
    }

    let filterCmd = new FilterClass(args);

    let pendingPromise = Promise.resolve();
    await readLines(async (line) => {
        let previousPromise = pendingPromise;
        pendingPromise = (async () => {
            let warnings = [];
            let outputLine = line;
            let logger = {
                warn(msg) {
                    warnings.push(msg);
                },
                replaceOutputLine(newOutputLine) {
                    outputLine = newOutputLine;
                },
            };
            // Process the line ASAP...
            let wantLine = await filterCmd.filter(logger, line);
            if (wantLine) {
                // ... but buffer the output to maintain FIFO order.
                await previousPromise;
                console.log(outputLine)
            }
            if (warnings.length) {
                await previousPromise;
                for (let warning of warnings) {
                    console.warn(`Warning in ${line}`);
                    console.warn(warning)
                }
            }
        })();
        // Upon catching an error, readLines will stop reading more lines.
        await pendingPromise;
    });

    await pendingPromise;

    return 0;
}

main().then((exitCode) =>{
    if (exitCode) {
        process.exit(exitCode);
    }
    // If successful exit code, just wait until the end of the event loop,
    // so that any queued output is flushed.
}, (e) => {
    console.error(e);
    process.exit(1);
});
